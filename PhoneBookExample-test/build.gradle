import org.gradle.tooling.pde.EclipseTestExecuter

apply plugin: 'java'
apply plugin: 'org.akhikhl.wuff.eclipse-ide-bundle'

project.extensions.create('eclipseTestExt', org.gradle.tooling.pde.EclipseTestExtension)

eclipseTestExt {
  intImageTestProject project(':intTestImage')
  testPluginName 'PhoneBookExample'
}

dependencies {
  compile "${eclipseMavenGroup}:org.eclipse.core.commands:+"
  compile project(':PhoneBookExample')
  compile 'junit:junit:3.8.2'
}

jar {
  manifest {
    instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.6'
    instruction 'Bundle-Version', project.version
  }
}

task integTest(type: org.gradle.tooling.pde.RunPDETest,
        dependsOn: [':intTestImage:buildProduct_linux_x86_64', ':intTestImage:prepareRunConfig']) {
    inputs.files project(':intTestImage').task(':prepareRunConfig').outputs
    intImageTestProject project(':intTestImage')
}

sourceSets {
    eclipseTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

configurations {
    eclipseTestCompile.extendsFrom testCompile
    eclipseTestRuntime.extendsFrom testRuntime
}

task prepareEclipseTest(type: org.gradle.tooling.pde.PrepareEclipseTestTask,
        dependsOn: [':intTestImage:buildProduct_linux_x86_64', ':intTestImage:prepareRunConfig']) {
}

task eclipseTest(type: Test, dependsOn: 'prepareEclipseTest') {
    testExecuter = new EclipseTestExecuter()

    testClassesDir = sourceSets.eclipseTest.output.classesDir
    classpath = sourceSets.eclipseTest.runtimeClasspath
    testSrcDirs = []
    // jvmArgs '-Xmx512m', '-XX:MaxPermSize=256m', '-XX:+HeapDumpOnOutOfMemoryError'

    // reports.junitXml.destination = file("${project.testResultsDir}/$name")
    reports.html.destination = file("${project.reporting.baseDir}/$name")
}